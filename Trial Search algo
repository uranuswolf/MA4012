#pragma config(Sensor, dgtl2, RIGHT_ENCODER, sensorQuadEncoder)
#pragma config(Sensor, dgtl4, LEFT_ENCODER, sensorQuadEncoder)
#pragma config(Sensor, dgtl6, IR_A_Sensor, sensorDigitalIn)
#pragma config(Sensor, dgtl7, IR_B_Sensor, sensorDigitalIn)
#pragma config(Sensor, dgtl8, IR_C_Sensor, sensorDigitalIn)
#pragma config(Sensor, dgtl9, IR_D_Sensor, sensorDigitalIn)
#pragma config(Motor, port3, motorLeft, tmotorVex393_MC29, openLoop)
#pragma config(Motor, port4, motorRight, tmotorVex393_MC29, openLoop)

// === Constants & Global Variables ===
int basePower = 50;
#define PI 3.14159265359

float wheelDiameter = 0.06985;
float wheelCircumference = wheelDiameter * PI;
int ticksPerRevolution = 90;
float distancePerTick = wheelCircumference / ticksPerRevolution;
float wheelBase = 0.188;

bool leftScanBoundary = false;
bool rightScanBoundary = false;

// IR Sensor Values (Global)
int IR_A = 1;
int IR_B = 1;
int IR_C = 1;
int IR_D = 1;

// === Read IR Sensor Task ===
void readIR() {
    while (true) {
        IR_A = SensorValue[IR_A_Sensor];
        IR_B = SensorValue[IR_B_Sensor];
        IR_C = SensorValue[IR_C_Sensor];
        IR_D = SensorValue[IR_D_Sensor];

        writeDebugStreamLine("IR_A: %d, IR_B: %d, IR_C: %d, IR_D: %d", IR_A, IR_B, IR_C, IR_D);

        wait1Msec(50);
    }
}

task readIRTask() {
    readIR();
}

// === Helper Functions ===
int distanceToTicks(float distance) {
    return distance / distancePerTick;
}

void moveDistance(float distance, bool backward = false) {
    float realDistance = distance * 3.5; //offset =3.5
    int targetTicks = distanceToTicks(realDistance);

    SensorValue[LEFT_ENCODER] = 0;
    SensorValue[RIGHT_ENCODER] = 0;

    if (backward) {
        motor[motorLeft] = 1.28 * basePower;
        motor[motorRight] = -basePower;
    } else {
        motor[motorLeft] = -1.28 * basePower;
        motor[motorRight] = basePower;
    }

    while (abs(SensorValue[LEFT_ENCODER]) < targetTicks &&
           abs(SensorValue[RIGHT_ENCODER]) < targetTicks) {
        wait1Msec(10);
    }

    motor[motorLeft] = 0;
    motor[motorRight] = 0;
}

void turnDegrees(float degrees, bool right = false) {
    float realDegrees = degrees * 2.5; // offset = 2.5
    float turningCircumference = 3.14159 * wheelBase;  // Full turning circle
    float arcLength = (realDegrees / 180.0) * turningCircumference; // One wheel arc distance
    
    int targetTicks = distanceToTicks(arcLength);

    SensorValue[LEFT_ENCODER] = 0;
    SensorValue[RIGHT_ENCODER] = 0;

    if (right) {
        motor[motorLeft] = -127;
        motor[motorRight] = -127;
    } else {
        motor[motorLeft] = 127;
        motor[motorRight] = 127;
    }

    while (abs(SensorValue[LEFT_ENCODER]) < targetTicks &&
           abs(SensorValue[RIGHT_ENCODER]) < targetTicks) {
        wait1Msec(10);
    }

    motor[motorLeft] = 0;
    motor[motorRight] = 0;
}

// === IR Boundary Detection Functions ===
void checkBoundary() {
    if ((IR_A == 1 && IR_C == 1) && (IR_B == 0 && IR_D == 0)) {
        leftScanBoundary = true;
        rightScanBoundary = false;  // Ensure this flag is reset
        writeDebugStreamLine("Left boundary detected");
    } 
    else if ((IR_B == 1 && IR_D == 1) && (IR_A == 0 && IR_C == 0)) {
        rightScanBoundary = true;
        leftScanBoundary = false;  // Ensure this flag is reset
        writeDebugStreamLine("Right boundary detected");
    } 
}


// === Scan Sequence Pattern ===
void scanSequenceLeft() {
    turnDegrees(20); //scan 20 degree to the left 
    wait1Msec(1000);
    turnDegrees(40, true); //scan 40 degree to the right 
    wait1Msec(1000);
    turnDegrees(20); //scan 20 degree to the left 
    wait1Msec(1000);
}


void scanSequenceRight() {
    turnDegrees(40); //scan 40 degree to the left 
    wait1Msec(1000);
    turnDegrees(20, true); //scan 20 degree to the right 
    wait1Msec(1000);
    turnDegrees(40); //scan 40 degree to the left 
    wait1Msec(1000);
}


// === Left Side Search Algorithm ===
void searchingAlgoLeft() {
    moveDistance(1.2);  //move a distance of 1.2 meter forward
    wait1Msec(1000);  //wait first before scan
    scanSequenceLeft(); //execute scan function 

    moveDistance(0.3); //move a distance of 0.3 meter forward
    wait1Msec(1000);  //wait first before scan
    scanSequenceLeft(); //execute scan function

    moveDistance(0.3); //move a distance of 0.3 meter forward
    wait1Msec(1000);  //wait first before scan
    scanSequenceLeft(); //execute scan function

    moveDistance(1.8, true); //move a distance of 1.8 meter backward
    wait1Msec(1000); //wait first before scan

    turnDegrees(20, true); //turn right 20 degrees 
    wait1Msec(1000); //wait first before move
    moveDistance(1.25); //move a distance of 1.25 meter forward
    wait1Msec(1000); //wait first before turn
    turnDegrees(40); //turn left 40 degrees 
    wait1Msec(1000); //wait first before turn
    turnDegrees(20, true); //turn right 20 degrees 
    wait1Msec(1000);//wait first before move

    moveDistance(0.3); //move a distance of 0.3 meter forward
    wait1Msec(1000); //wait first before scan
    scanSequenceLeft(); //execute scan function

    moveDistance(0.3); //move a distance of 0.3 meter forward
    wait1Msec(1000); //waitfirst before scan
    scanSequenceLeft(); //execute scan function

    moveDistance(1.8, true); //move a distance of 1.8 meter backward
    wait1Msec(1000);//wait 
}

// === Right Side Search Algorithm (Mirrored) ===
void searchingAlgoRight() {
    moveDistance(1.2);
    wait1Msec(1000);
    scanSequenceRight();

    moveDistance(0.3);
    wait1Msec(1000);
    scanSequenceRight();

    moveDistance(0.3);
    wait1Msec(1000);
    scanSequenceRight();

    moveDistance(1.8, true);
    wait1Msec(1000);

    turnDegrees(20); // turn left
    wait1Msec(1000);
    moveDistance(1.25);
    wait1Msec(1000);
    turnDegrees(40, true);
    wait1Msec(1000);
    turnDegrees(20);
    wait1Msec(1000);

    moveDistance(0.3);
    wait1Msec(1000);
    scanSequenceRight();

    moveDistance(0.3);
    wait1Msec(1000);
    scanSequenceRight();

    moveDistance(1.8, true);
    wait1Msec(1000);
}

// === Main Scanning Function ===

void searchingAlgo() {
    startTask(readIRTask);  // Start reading IR sensor values continuously
    wait1Msec(200);  // Give some time for the IR sensor task to gather initial readings

    checkBoundary();  // Check the boundary once

    if (leftScanBoundary) {  // Trigger left search algorithm if left boundary detected
    	  stopTask(readIRTask);
        searchingAlgoLeft();
    } 
    else if (rightScanBoundary) {  // Trigger right search algorithm if right boundary detected
    	  stopTask(readIRTask);
        searchingAlgoRight();
    } 
}

// === Main Entry Point ===
task main() {
    searchingAlgo();
}
